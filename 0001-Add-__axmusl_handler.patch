From 5b7c4b1ab873044caf995129f5c9f6054662382f Mon Sep 17 00:00:00 2001
From: dramforever <dramforever@live.com>
Date: Fri, 8 Dec 2023 15:59:30 +0800
Subject: [PATCH] Add __axmusl_handler

---
 arch/riscv64/crt_arch.h          |  6 ++++
 arch/riscv64/syscall_arch.h      | 62 +++++++++-----------------------
 src/signal/riscv64/restore.s     |  2 +-
 src/thread/riscv64/__unmapself.s |  4 +--
 src/thread/riscv64/clone.s       |  4 +--
 src/thread/riscv64/syscall_cp.s  |  2 +-
 6 files changed, 28 insertions(+), 52 deletions(-)

diff --git a/arch/riscv64/crt_arch.h b/arch/riscv64/crt_arch.h
index 6b93fcfd..728150ef 100644
--- a/arch/riscv64/crt_arch.h
+++ b/arch/riscv64/crt_arch.h
@@ -1,3 +1,6 @@
+long (*__axmusl_handler)(long n, ...);
+long __axmusl_reg[2];
+
 __asm__(
 ".section .sdata,\"aw\"\n"
 ".text\n"
@@ -8,6 +11,9 @@ START ":\n"
 ".hidden __global_pointer$\n"
 ".option push\n"
 ".option norelax\n\t"
+"sd a0, __axmusl_handler, t0\n\t"
+"sd gp, __axmusl_reg, t0\n\t"
+"sd tp, __axmusl_reg + 8, t0\n\t"
 "lla gp, __global_pointer$\n"
 ".option pop\n\t"
 "mv a0, sp\n"
diff --git a/arch/riscv64/syscall_arch.h b/arch/riscv64/syscall_arch.h
index 7fd042cd..5e011342 100644
--- a/arch/riscv64/syscall_arch.h
+++ b/arch/riscv64/syscall_arch.h
@@ -1,73 +1,43 @@
 #define __SYSCALL_LL_E(x) (x)
 #define __SYSCALL_LL_O(x) (x)
 
-#define __asm_syscall(...) \
-	__asm__ __volatile__ ("ecall\n\t" \
-	: "=r"(a0) : __VA_ARGS__ : "memory"); \
-	return a0; \
+extern long __axmusl_reg[2];
+extern long (*__axmusl_handler)(long *reg, long n, ...);
+
 
 static inline long __syscall0(long n)
 {
-	register long a7 __asm__("a7") = n;
-	register long a0 __asm__("a0");
-	__asm_syscall("r"(a7))
+	return __axmusl_handler(__axmusl_reg, n);
 }
 
-static inline long __syscall1(long n, long a)
+static inline long __syscall1(long n, long a0)
 {
-	register long a7 __asm__("a7") = n;
-	register long a0 __asm__("a0") = a;
-	__asm_syscall("r"(a7), "0"(a0))
+	return __axmusl_handler(__axmusl_reg, n, a0);
 }
 
-static inline long __syscall2(long n, long a, long b)
+static inline long __syscall2(long n, long a0, long a1)
 {
-	register long a7 __asm__("a7") = n;
-	register long a0 __asm__("a0") = a;
-	register long a1 __asm__("a1") = b;
-	__asm_syscall("r"(a7), "0"(a0), "r"(a1))
+	return __axmusl_handler(__axmusl_reg, n, a0, a1);
 }
 
-static inline long __syscall3(long n, long a, long b, long c)
+static inline long __syscall3(long n, long a0, long a1, long a2)
 {
-	register long a7 __asm__("a7") = n;
-	register long a0 __asm__("a0") = a;
-	register long a1 __asm__("a1") = b;
-	register long a2 __asm__("a2") = c;
-	__asm_syscall("r"(a7), "0"(a0), "r"(a1), "r"(a2))
+	return __axmusl_handler(__axmusl_reg, n, a0, a1, a2);
 }
 
-static inline long __syscall4(long n, long a, long b, long c, long d)
+static inline long __syscall4(long n, long a0, long a1, long a2, long a3)
 {
-	register long a7 __asm__("a7") = n;
-	register long a0 __asm__("a0") = a;
-	register long a1 __asm__("a1") = b;
-	register long a2 __asm__("a2") = c;
-	register long a3 __asm__("a3") = d;
-	__asm_syscall("r"(a7), "0"(a0), "r"(a1), "r"(a2), "r"(a3))
+	return __axmusl_handler(__axmusl_reg, n, a0, a1, a2, a3);
 }
 
-static inline long __syscall5(long n, long a, long b, long c, long d, long e)
+static inline long __syscall5(long n, long a0, long a1, long a2, long a3, long a4)
 {
-	register long a7 __asm__("a7") = n;
-	register long a0 __asm__("a0") = a;
-	register long a1 __asm__("a1") = b;
-	register long a2 __asm__("a2") = c;
-	register long a3 __asm__("a3") = d;
-	register long a4 __asm__("a4") = e;
-	__asm_syscall("r"(a7), "0"(a0), "r"(a1), "r"(a2), "r"(a3), "r"(a4))
+	return __axmusl_handler(__axmusl_reg, n, a0, a1, a2, a3, a4);
 }
 
-static inline long __syscall6(long n, long a, long b, long c, long d, long e, long f)
+static inline long __syscall6(long n, long a0, long a1, long a2, long a3, long a4, long a5)
 {
-	register long a7 __asm__("a7") = n;
-	register long a0 __asm__("a0") = a;
-	register long a1 __asm__("a1") = b;
-	register long a2 __asm__("a2") = c;
-	register long a3 __asm__("a3") = d;
-	register long a4 __asm__("a4") = e;
-	register long a5 __asm__("a5") = f;
-	__asm_syscall("r"(a7), "0"(a0), "r"(a1), "r"(a2), "r"(a3), "r"(a4), "r"(a5))
+	return __axmusl_handler(__axmusl_reg, n, a0, a1, a2, a3, a4, a5);
 }
 
 #define VDSO_USEFUL
diff --git a/src/signal/riscv64/restore.s b/src/signal/riscv64/restore.s
index 40012c75..d0218936 100644
--- a/src/signal/riscv64/restore.s
+++ b/src/signal/riscv64/restore.s
@@ -5,4 +5,4 @@ __restore:
 .type __restore_rt, %function
 __restore_rt:
 	li a7, 139 # SYS_rt_sigreturn
-	ecall
+	csrwi cycle, 2 # FIXME
diff --git a/src/thread/riscv64/__unmapself.s b/src/thread/riscv64/__unmapself.s
index 2849119c..4566d675 100644
--- a/src/thread/riscv64/__unmapself.s
+++ b/src/thread/riscv64/__unmapself.s
@@ -2,6 +2,6 @@
 .type __unmapself, %function
 __unmapself:
 	li a7, 215 # SYS_munmap
-	ecall
+	csrwi cycle, 3 # FIXME
 	li a7, 93  # SYS_exit
-	ecall
+	csrwi cycle, 3 # FIXME
diff --git a/src/thread/riscv64/clone.s b/src/thread/riscv64/clone.s
index db908248..a834d802 100644
--- a/src/thread/riscv64/clone.s
+++ b/src/thread/riscv64/clone.s
@@ -18,7 +18,7 @@ __clone:
 	mv a3, a5
 	mv a4, a6
 	li a7, 220 # SYS_clone
-	ecall
+	csrwi cycle, 4 # FIXME
 
 	beqz a0, 1f
 	# Parent
@@ -31,4 +31,4 @@ __clone:
 
 	# Exit
 	li a7, 93 # SYS_exit
-	ecall
+	csrwi cycle, 4 # FIXME
diff --git a/src/thread/riscv64/syscall_cp.s b/src/thread/riscv64/syscall_cp.s
index eeef6391..c1f5e45b 100644
--- a/src/thread/riscv64/syscall_cp.s
+++ b/src/thread/riscv64/syscall_cp.s
@@ -22,7 +22,7 @@ __cp_begin:
 	mv a5, a7
 	ld a6, 0(sp)
 	mv a7, t0
-	ecall
+	csrwi cycle, 5 # FIXME
 __cp_end:
 	ret
 __cp_cancel:
-- 
2.42.0

